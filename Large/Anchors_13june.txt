Flexible anchoring of pairwise alignments of sequences with low similarity in AlignMeR. Staritzbichler*, K. Khafizov*, M. Stamm, L.R. Forrest*contributed equallyUsed abbrevations: MSA multiple sequence alignment, FLAC flexible anchors, ADS alignment difference score, FAP family averaged profileAbstractAlignMe - the program specifically oriented towards aligning distantly related sequences of membrane proteins - is now enriched by FLACs (FLexible AnChors)[MS1] that allow to specify any number of residue pairs that are supposed to be aligned. Additionally, the strength of the anchors can be tuned from preference to enforcement, reflecting the confidence in that position to be aligned. Source of the anchor constraints can be expert knowledge[KK3], experimental data or advanced alignment techniques like the alignments of family-averaged profiles in AlignMe. For this and also for the pairwise alignments, the AlignMe server now allows to provide a list of residue-pair IDs [MS4]and strengths. Different anchor implementations are available, such as spring-like anchors offering a linear attraction or non-linear anchors[KK5] allowing small shifts but strongly opposing higher deviations.We explore the performance of the anchors and evaluate the gain in the alignment accuracy when applied to sequences of very low similarity. Using the alignment difference score (ADS) and structural alignments from the HOMEP dataset as reference we quantitatively analyze the improvement. While FLACs are not restricted to any particular class of proteins, we highlight the ones sharing the LeuT fold as these pose some of the most difficult cases.IntroductionSequence alignments are a key tool in bioinformatics, expanding structural and functional insight from experimentally known proteins to such that share sufficiently similar sequences. This in turn can help investigating unknown proteins, exploiting the fact that similar sequences reflect related structures and often as well function. Ideally such predictions are used to guide experiments. By understanding key positions in the sequence, mutation experiments are frequently suggested. Also experimental data evaluation often benefits from similarities, e.g. homology models are used to derive structures from X-ray diffraction patterns. Aligning sequences involves two main components: (i) exploring the massive number of possible ways to relate two sequences and (ii) scoring the quality of any of these combinations. The scoring itself embraces two rather distinguished facets. Its first aspect is to evaluate how similar two aligned amino acids are. The other has to deal with mismatches, handled by assigning gaps to amino acids in the alignment. Biologically, gaps reflect insertions and deletions during evolution.[KK7] It is a common belief that alignments with fewer and thus longer gap regions are superior to alignments with many short gaps[MS9].[RS10] Affine gap penalty schemes reflect this by assigning higher penalties when inserting or opening a new gap compared to when an existing gap is extended.[RS11]The most common search method [MS13]determining pairwise alignments is dynamic programming, which guarantees the best solution according to the used similarity criteria (ref). Thus, the quality of alignments depends crucially on a well-balanced combination of similarity detection and gap penalization. Classically, similarity scores are assigned in terms of substitution matrices based on replacement probabilities in evolutionary-related sequences. However, it is well-known that protein structure is better conserved than underlying sequence. Another way to express this is that a rather large sequence space may be covered by sequences from structurally related proteins, leading to sometimes stunningly low similarities among related sequences. This shows rather drastically in the case of membrane proteins [khafizov 2010]. However, similarity can be expressed not only by evolutionary means of statistically derived substitution probabilities but, in principle, by any other quantifiable property of amino acids. Differences in biochemical [KK14]properties like hydrophobicity have proven to be a useful measure of similarity [slotbom]. Programs like BCL::Align [dong 2008] and AlignMe use a linear combination of different scores. We have shown that a combination of substitution matrix, transmembrane and secondary structure predictions works best to match sequence alignments to structural alignments of the HOMEP2010 dataset [Stamm et al., 2011]. Adding new measures is useful as long as they add new information that helps averaging out errors of other profiles in a consensus sense. [MS15]Applying scores [MS16]other than substitution matrices will be beneficial if sequence-similarities are low (Stamm et al., 2011). Sequences with high or mediocre level of similarity can normally be well aligned with common substitution matrices that score similarity based on the likeliness of an amino acid to be replaced by another. Measures such as the agreement of transmembrane predictions may be too unspecific in the case of high similarity. Thus, using AlignMe's combined scoring function could be counterproductive in the case of high sequence-similarity but will blossom to full strength where substitution by itself will fail.[KK17][RS18]The alignment of two homologue sequences with low similarity may benefit from the intermediate step of creating MSAs from similar sequences collected with BLAST or PSI-BLAST for each of the query sequences (Khafizov et al., 2010). This evolutionary smoothing averages out local or individual fluctuations, and emphasizes evolutionary relevant information. By averaging the hydrophobicities over the columns of the MSA, a family averaged profile (FAP) is obtained for each of the two query sequences, which, in turn, can be aligned in a pairwise manner [Khafizov et al., 2010]. The MSAs of the query sequences add statistical and evolutionary significance to the FAPs. Aligned positions[KK19] are expected to be more reliable. AlignMe returns the alignment of the query sequences by back-mapping the aligned FAPs onto the query sequences.However, there are three factors requiring a refinement of the alignment of the initial query sequences. First, columns in the MSAs with too may gaps are not considered for the creation of the FAPs. Second, since only the mean value is considered for every position, potentially large variations at that position will not be recognized. Finally, gaps in the FA[MS20]P alignment [KK21]may not be necessarily the best solution for query sequences.Anchors[KK22] can be used to introduce expert [KK23]knowledge and experimental data into alignments. Anchors will be greatly useful when structurally similar but sequence-unrelated proteins need to be aligned for homology modeling, a frequent case when modeling membrane proteins. When related proteins share no sequence similarity overall, but some highly conserved motifs, like in case of GPCRs, anchors will be of great benefit.MSA algorithms differ significantly from the dynamic programming, [MS24]with the advantage of being faster and therefore feasible for alignments of many sequences, but inherently having the disadvantage of not necessarily resulting in the best possible alignment[MS25]. Inflexible rigid anchors are easily implemented in the frame of MSAs and are commonly applied [,,]. However, anchors in dynamic programming are missing up to date. [KK26]We introduce a simple way to add any number of anchors with flexible strength and a variety of different penalty patterns resulting in a very flexible anchoring.A frame that allows immediate testing and quantitatively exploring the effect of anchors are the alignments of averaged MSA profiles as described in [Khafizov et al., 2010]. In order to do this we extract the query sequences from the pairwise alignment of the FAPs and derive anchors from every position that was aligned. Using the anchors we re-align the query sequences and compare the result with the structural alignments in HOMEP.MethodsAlignMeAlignMe is described in detail in [Khafizov et al., 2010 and Stamm et al, 2011]. It is based on a Needleman-Wunsch algorithm using a weighted linear combination of similarity profiles and an affine gap penalty scheme, distinguishing penalties for opening from extending gaps. Terminal gaps have individual penalties. In an advanced penalty scheme a threshold in one or more of the profiles is used to distinguish penalties to be applied according to whether neighboring aligned positions are above or below that threshold. This allows for applying different penalties in structurally or functionally more conserved regions, such as, for instance, TM helices.Reference dataReference data are the structural alignments that were created for sorting known high resolution structures into structurally related families of the HOMEP2010. By filtering close homologues, the HOMEP spans the sequential space of its structural families with non-redundant proteins. We use the alignment difference score (ADS) introduced in [Stamm et al., 2011] that scores the distance of amino acids for comparing alignments. As an additional measure we use a percentile of overlapping helices emphasizing the structurally more conserved and relevant areas [MS28](( or helix-only ADS ? ))Family averaged profiles (FAPs)For every sequence of the protein structures present in the HOMEP dataset, we collected homologue sequences using PSI-BLAST, clustered them (XX Marcus  how did you do the clustering and any non-default settings anywhere?? XXX),[MS29] and created MSAs using MUS[MS30]CLE (ref) with its defaults settings. Afterwards, we used AlignMe to average the MSAs using hydrophobicity properties of amino acids and [MS32]to calculate the confidence scores for individual positions. A pairwise alignment of the FAPs is then performed in AlignMe as described in Khafizov et al. (Khafizov et al., 2010).Back-mapping the aligned FAPs onto the query sequences[MS33] serves as output when no anchors are applied. We exploit the back-mapped alignment (BMA) as reference for comparing the quality of alignments with or without anchors. Furthermore, the list of anchors is extracted from the BMA, connecting all aligned positions.With this list of anchors the query sequences can be realigned to optimize the alignment for the native sequences, while still maintaining the 'global' information obtained from the FAPs. Both the anchored alignments as well as the back-mapped alignments can be compared to the structural alignments using the ADS. Relating the difference in ADS with the possible range in ADS represents the improvement obtained by applying anchors in the refinement step. By variation of the strength[KK36] [RS37]of the anchors and comparing different anchor types the minimum ADS can be determined and thus the overall optimized anchoring procedure.Furthermore, the overall improvement in relation to basic pairwise alignments with AlignMe's optimized scoring function was evaluated.Confidence scoreWhen creating the anchors, not all positions in the FAPs will share the same relevance. Having many gaps or a large deviation will make averaged values less meaningful.In order to adjust the strength of the anchors such that less significant positions in the FAPs are assigned a lower anchor strength, we calculate a confidence score for each column of the MSA:[KK38],[MS39]where  is the mean value of a profile averaged over all sequences at that column,  the maximum range of the profile, n the number of sequences, and  the profile value for sequence i. The sum is over all sequences at a given position i.e. a given column of the MSA.In this way, the confidence is related to the standard deviation of the profile at a given position. It is also related to the number of sequences in the MSA that actually contributed to the mean value. The more gaps are found at a position the lower the confidence[MS41]. The larger the deviation among the values found at a position the lower the confidence. The confidence is scaled such that 1 represents full confidence in the mean value at that position, 0 obviously no confidence.[KK42]Anchor matrix[MS43]During the dynamic programming procedure, an n x m alignment matrix is calculated for sequences of lengths n and m. Each element describes the maximum score related to one of the possible previous alignment positions. Calculating the matrix is the actual time consuming step in the pairwise alignment procedure[KK44]. A straightforward and simple way to implement the anchoring into the pairwise alignment algorithm is to precalculate 'anchoring matrices' containing penalties for alignment pathways that do not pass the desired position. Summing the anchor penalty matrix to the dynamic programming matrix results in the total matrix which is then used to determine the actual alignment in the 'traceback' algorithm. Now, the goal is to emphasize certain positions in the alignment matrix, e.g. residue a of the first sequence should be aligned with residue b of the second sequence. Any path not passing the according position in the alignment matrix should be penalized. We constructed an anchoring matrix as follows:The anchor matrix (for every pair of residues to be connected) is build before the dynamic programming algorithm adds similarity scores and gap penalties. All the anchor matrices are superimposed onto each other and the resulting anchor matrix is then used as a starting point for dynamic programming. No actual calculations have to be performed. Thus, the creation of the anchor matrix is a very fast step. [MS45]Due to its additive nature there is no limitation in the number of anchors that may be provided. The anchors may vary in strength, which is solely determined by the values filling the anchor matrix. Fig X shows an example for such a matrix.-1-1-10-1-1-1-1-1-1-1-1-1-1-1-1-10-1-1-1-10-1-1-1-1Fig X: a spring-like anchor matrixThis will assign a penalty that increases linearly with increasing distance between anticipated and resulting alignment. Thus it causes a linear attraction and is called 'spring-like anchoring matrix' (SLAM).A simpler matrix can be constructed if any alignment not passing through the desired position shall receive the same penalty, i.e. it shall not distinguish how far a misalignment is off from the anchor. We construct the 'binary anchoring matrix' (BAM) like this:which would look like this:-10-1-1-1-1-1-1-100Fig X: a binary anchor matrixMultiple anchors do not affect each other in this implementation. Following the same geometry more complex patterns can be constructed. However, we figured the SLAM implementation is more consistent.Modifying the SLAM allow to construct non-linear attraction matrices that assign only small penalties for small deviations but then rapidly increase them.-4-8-160-2-4-8-1-2-4-0.5-1-2-4-2-1-0.50-8-4-2-10-16-8-4-2Fig X: a non-linear anchor matrixNon-linear anchors may be very useful when one is certain that a given pair of amino acids should be aligned, but it cannot be excluded that they are shifted by a few positions. The non-linear anchors could be defined as weak for a shift of e.g. 2 or 3 positions and then rapidly increase.[KK46] The method is not restricted to membrane proteins and can be applied to globular proteins as well. Comments to the figure:We still have averaged hydropathy profiles only (or am I wrong?).REPLY: we have all available at any step and the last step is done with the full packResults and discussionFor all tests, the ADS to the structural alignments of the HOMEP were used as score. Therefore all tests were performed with sequence pairs having structural alignments in the HOMEP. In all following sections the main test is to plot the ADS of alignments as a function of strength, illustrating the effect of applying anchors of different strength, The two endpoints of the plots are equivalent to, first, no anchor used, and second, to complete enforcement of the anchor. Using the same data and scoring scheme in all tests the results are immediately comparable. Tests a) - c) are consistency and basic performance tests. Tests d) through x) are designed to optimize the actual performance when used in the context of family averaged profile (FAP) alignment.a) Tuning homogenous anchors (SLAM) derived from HOMEP structural alignmentsAs a proof of concept we derive anchors from the structural alignments created to build HOMEP. Previously, we optimized the scoring function in AlignMe to reduce the overall ADS [Stamm 2011]. The ADS of the resulting alignments is the 'base line' for using no anchors. By increasing the strength of the anchors the transition to an ADS of zero, meaning that all positions match the structural alignment, can be plotted. Figure XXX plots anchor strength vs ADS first for the entire data, then separated by families/similarity and then by alignment length (i.e. number of anchors applied).Figure XXX plots ((WHAT??)) vs alignment size.b) Testing performance of binary anchoring matrix (BAM)Here we compare SLAM and BAM. One expects SLAM to outperform BAM. In order to test this, we first find for both the anchor strength that leads to a zero ADS. Subsequently we randomly erase anchors from the list to see the transition to the no-anchor reference value.c) Testing performance of non-linear anchoring matrix (NLAM)In order to test NLAM we did a MC mutation of anchors.First, determine minimum number of anchors needed in alignment to get zero ADS.2D plot: nr of residues to be mutations, degree of max mutationBy increasing the mutation level there should be a point at which NLAM will start to perform better than SLAM. This will test the stability of the anchoring against errors in the anchoring information.d) Tuning homogeneous spring-like anchoring matrix (SLAM) derived from aligned FAPsAs described in the methods section we use aligned positions in the alignment of the FAPs to derive a list of anchors. Again we re-align the query sequences with increasingly strong anchors.Starting from zero the plots show the transition behavior ending in saturation equivalent to complete enforcement of the anchor.e) Gap penalty optimization with homogeneous anchorsUsing the optimized anchor strength from previous test, we perform a Monte Carlo optimization of the gap penalties. In the first run we focus on the penalties during the re-alignment using anchors. If improvement was observed, one could go back and tune the gap penalties applied when averaging the MSAs.Step d) and e) can be iterated a few times.f) Tuning confidence biased anchors derived from aligned FAPsTune as usual, using the confidence values calculated as in equation XX as a multiplier to the overall anchor strength. Maintaining their relative strength the overall factor is incremented as in previous tests.g) Highlight LeuT fold((necessary??))h) Highlight GPCRsHere we compare the 'standard' FAP procedure with the usage of GPCR conserved motifs, and also with using anchors from both FAP and motifs.i) Random anchorsIn previous tests, the anchors actually made sense, were available in large amount and the targeted alignment was not too off from the un-anchored alignment. This obviously means a bias. Here we evaluate how strong anchors need to be to enforce randomly created anchors and compare this to previous results.The absolute lowest ADS value indicates the overall optimum. The total ADS value is the sum over the entire HOMEP. Having determined the lowest ADS as XXX, we can now compare this to pairwise alignments using AlignMe's full scoring function as optimized in [Stamm 2011]. For these alignments the total ADS with the structural alignments is calculated as XXX. Concluding, an improvement of XXX% of the anchored vs the non-anchored FAPs was obtained and and an improvem[MS54]ent of XXX% of the anchored vs the pairwise alignments.Significance level XYZ.It should be noted that optimizing towards structural alignments may have some inherent limitations themselves but are probably the most meaningful reference data.((e[MS55]rase?))SummaryWe have presented a new method that allows to flexibly connect pairs of residues when aligning protein sequences. This implementation presents several advantages. First it is trivial and fast to calculate the anchor matrix, which includes all the information for positions to be connected. Second, it is additive by nature, allowing to use any number of anchors. Third, its behavior can be tuned from being spring[KK56]-like in [MS57]the sense that the further off the alignment is the higher the penalty to constant or non-linear penalty patterns. Lastly, its strength can be tuned by varying s[KK58] from a vague preference to complete enforcement. This can reflect the certainty in a given constraint. We tested several anchor patterns and it turned out...AvailabilityThe SLACs are available online at www.bioinfo.rzg.de/AlignMe for both the pairwise alignment of sequences as well as the alignment of pairs of averaged MSAs. The source code of AlignMe contains the anchors implementation from version 1.1 on and is freely available to academic users at www.forrestlab.org/databases_and_software. It will be straightforward to integrate the SLACs related code into other alignment software based on dynamic programming. Additionally, the optimizer used here is included into release 1.1.ReferencesKhafizov et al., 2010Stamm et al., 2011[dong 2008]slotboom[MS1]What is the difference between them?![KK2]Not clear. Strength reflects how strong are the springs or it is about confidence of positions?[KK3]What is this?[MS4]Residue-Pairs, or_ [KK5]Do you think it is clear what is the difference between these two?[KK6]Crucial point and needs to be explained a little better.[KK7]We should write about insertions/deletions, and not about aligning to nothing.[MS8]You should not forget the biological background. Gaps are positions which have been deleted during evolution resp. amino acids facing a gap have been inserted during evolution.  So it is maybe better to say that gaps should occur more often in unrelated segments... [MS9]Here you definetly need a REF. I do not know if there is a study which has really tested this aspect. Mostly this is an assumption because the alignments look nicer than those with many gaps... but that does not directly mean that alignments with more gaps are less accurate... [RS10]I called it a belief because it might not always be true. But I can show you examples where it is. Using affine gaps means following that belief.[RS11]Dynamic prog. Searches for the the best possible alignment[KK12]I would rewrite this part completely. This is not at all biological.[MS13]What do you mean with "search method"? What are you searching for?[KK14]Are these only biochemical? I think, hydrophobicity is biophysical...[MS15]This has also been shown in our study...[MS16]Scoring schemes sounds strange... maybe replace it with "sequence similarity information" or  "amino acid similarity" ... [KK17]Not sure I understand.[RS18]More clear now? Message: don't use AlignMe for high sequence similarity. Lucy reported difficulties for such cases.[KK19]Do you mean aligned in the MSA or aligned between two final sequences?[MS20]Is it Averaged Multiple Sequence Alignment Profiles?!? If yes, please define it somewhere... [KK21]??[KK22]here we have to say a bit more about them.[KK23]What is this?[MS24]Some MSA methods apply dynamic programming principles, so it is wrong to say that MSAs differ from this![MS25]But this is true for all alignment methods... not only for MSAs[KK26]You really introduce some confusion here. Do not try to mix them up.[KK27]We will have to rewrite this.[MS28]I don't get this idea. If you want to use the knowlegde about helices, you have to mention how you obtained this information (which is missing here)[MS29]See the data in the AlignMe paper. However, it is more important to mention which database we have used for the search, because dependent on the database the results may differ (info about this is also in the AlignMe Paper). [MS30]Why did you choose alignments from muscle and not from another method? T-coffee hat much more correctly aligned residues for low identical sequence pairs than muscle... at least you have to metion something why you have chosen this method and not another one... [MS31]For the Muscle-MSAs I clustered the PSI-Blast resutls and remove sequences that were too long (see also AlignMe Paper). [MS32]Which scale has been used? Was a window applied? If yes, which size?[MS33]How are positions treated which have been left out for the generation of the AMSAP??  How are they mapped back? Moreover, you have to explain what "mapped back" means...   [KK34]What? This is non-understandable to anyone! Even to me.[MS35]What is the previous alignment? I get confused at this point.. [KK36]You always call it strength but we should also introduce "constant".[RS37]Kamil: I didn't get your comment.[KK38]I will come back to this later as I am not very convinced.[MS39]So x are the hydrophobicity values and delta_max the highest difference at a certain column? If yes, then there should also be an i next to delta max. Or do you use other vlaues here?[KK40]We have to think about this. I am not satisfied.[MS41]Where are the gaps in the formula?!?  I do not understand how they contribute to the score ...[KK42]Do you mean that if a standard deviation is 0, then it is very confident, otherwise it is not.[MS43]If this is a general method, then mention this at the beginning of this section. If not, then it would be useful to know which steps have already been performent (i.e. alignment of averaged hydrophobicity profiles). [KK44]Actually, the most time-consuming is averaging of the MSA.[MS45]So there are not calculations if the matrices are superimposed? If yes,  then why to superimpose them instead of having just one matrix. If no, rewrite this sentence![KK46]Repetition of the previous..[MS47]So there are not calculations if the matrices are superimposed? If yes,  then why to superimpose them instead of having just one matrix. If no, rewrite this sentence![KK48]Think about this. Using uniform values means that the penalty is linearly depends from the displacement.[KK49]This we have to think about.[KK50]Repetition of the previous..[KK51]What?? I was thinking that ref data is structure-based alignments.[MS52]Are these anchors manually defined or somehow automated?! Is there a reasonable number of anchors that one should use? Does it get worse, if too many are used?[KK53]Which three?[MS54]Is this improvement significant? Where does this improvement occur? In TM or non-TM segments? Compare these results with those obtained from AlignMe without using averaged hydrophobicity. Are they now better than pairwise AlignMe?![MS55]What else should be your referene data? At least you need to have some data from which you assume that it is optimal... [KK56]Actually, spring-like os already not linear. Am I wrong?[MS57]Non-linear sounds better than spring-like... [KK58]What is s?89